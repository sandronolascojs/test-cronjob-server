// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String     @id @default(cuid())
  userId               String     @unique
  name                 String?
  email                String?    @unique
  image                String?
  userType             String
  facilities           Facility[]
  facilityName         String?
  about                String?
  provider             Provider?
  providerId           String?
  contract             Contract?
  customerId           String?
  howDidYouHearAboutUs String?
  contractSignedStatus Boolean    @default(false)
}

model Facility {
  id                    String         @id @default(cuid())
  user                  User           @relation(fields: [userId], references: [userId])
  userId                String
  name                  String?
  location              String?
  address               String?
  city                  String?
  state                 String?
  zipcode               String?
  lat                   Float?
  lng                   Float?
  facilityType          String?
  phone                 String?
  storeNpi              String?
  adminName             String?
  adminEmail            String?
  adminTitle            String?
  adminPhoto            String?
  licenceImg            String?
  insuranceImg          String?
  facilityImg           String?
  pharmacistRate        String?
  techRate              String?
  contractSignedStatus  Boolean        @default(false)
  hasFFMCompleted       Boolean        @default(false)
  createdAt             DateTime       @default(now())
  languages             Language[]     @relation("FacilityToLanguage")
  software              Software[]     @relation("FacilityToSoftware")
  specialties           Specialty[]    @relation("FacilityToSpecialty")
  staffingNeeds         StaffingNeed[] @relation("FacilityToStaffingNeed")
  shiftTypes            ShiftType[]    @relation("FacilityToShiftType")
  facilityTypes         FacilityType[] @relation("FacilityTofacilityType")
  shifts                Shift[]
  conversations         Conversation[]
  currentConversationId String?
  readReceipts          ReadReceipt[]
  connections           Connection[]
}

model Provider {
  id                      String               @id @default(cuid())
  user                    User                 @relation(fields: [userId], references: [userId])
  userId                  String               @unique
  userImage               String?
  email                   String?
  name                    String
  title                   String?
  stripeAccountId         String?
  stripeAccountSetup      Boolean              @default(false)
  hasMalpracticeInsurance Boolean              @default(false)
  streetAddress           String?
  city                    String?
  state                   String?
  zipcode                 String?
  lat                     Float?
  lng                     Float?
  licenseNumber           String?
  licenseExpiry           DateTime?
  licenseState            String?
  yearsExperience         String?
  pharmacyLicenseImage    String?
  certificationImage      String?
  phone                   String?
  about                   String?
  currentHourlyRate       String?
  complianceTrainings     ComplianceTraining[]
  contractSignedStatus    Boolean              @default(false)
  w9Status                Boolean              @default(false)
  createdAt               DateTime             @default(now())
  shiftsApplied           Shift[]              @relation("applicant")
  shiftsApproved          Shift[]              @relation("hiredProvider")
  hiredStatus             HiredStatus[]
  conversations           Conversation[]
  currentConversationId   String?
  readReceipts            ReadReceipt[]
  connections             Connection[]
  software                Software[]           @relation("ProviderToSoftware")
  specialties             Specialty[]          @relation("ProviderToSpecialty")
  languages               Language[]           @relation("ProviderToLanguage")
  facilityTypes           FacilityType[]       @relation("ProviderTofacilityType")
  checkrCandidate         CheckrCandidate[]
  stripePayments          StripePayment[]
  shiftApplications       Application[]
  TaxInformation          TaxInformation[]
  Certification           Certification[]
  Licenses                License[]
  LicensePayment          LicensePayment[]
}

model Certification {
  id         String   @id @default(uuid())
  type       String
  providerId String
  filename   String
  filelink   String
  provider   Provider @relation(fields: [providerId], references: [id])
  createdAt  DateTime @default(now())
}

model License {
  id                    String    @id @default(cuid())
  type                  String
  state                 String
  providerId            String
  filename              String
  filelink              String
  licenseExpirationDate DateTime
  isDeleted             Boolean   @default(false)
  deletedAt             DateTime?
  createdAt             DateTime  @default(now())

  provider       Provider         @relation(fields: [providerId], references: [id])
  LicensePayment LicensePayment[]
}

model Shift {
  id                           String         @id @default(cuid())
  facility                     Facility       @relation(fields: [facilityId], references: [id])
  facilityId                   String
  shiftCreatorName             String
  shiftLocationName            String?
  shiftCreatorImage            String
  shiftCreatorLogo             String?
  dateCreated                  DateTime       @default(now())
  shiftDate                    DateTime
  shiftTime                    String
  rate                         String
  facilityRate                 String?
  totalPayment                 String?
  displayedRate                String?
  title                        String?
  description                  String?
  providerRole                 String?
  facilityType                 String?
  quantityOfHours              String         @default("0")
  malpracticeInsuranceRequired Boolean        @default(false)
  experienceInSoftwareRequired Boolean        @default(false)
  drugScreenRequired           Boolean        @default(false)
  languages                    Language[]     @relation("ShiftToLanguage")
  software                     String?
  specialties                  Specialty[]    @relation("ShiftToSpecialty")
  facilityTypes                FacilityType[] @relation("ShiftTofacilityType")
  location                     String
  lat                          Float?
  lng                          Float?
  archived                     Boolean        @default(false)
  applicants                   Provider[]     @relation("applicant")
  applications                 Application[]
  hiredProvider                Provider?      @relation("hiredProvider", fields: [hiredProviderId], references: [id])
  hiredProviderId              String?
  hiredStatus                  HiredStatus?
  status                       ShiftStatus    @default(Pending)
  conversation                 Conversation?  @relation(fields: [conversationId], references: [id])
  conversationId               String?
  shiftPayment                 ShiftPayment?
}

model Application {
  id                          String   @id @default(cuid())
  shift                       Shift    @relation(fields: [shiftId], references: [id])
  shiftId                     String
  applicant                   Provider @relation(fields: [applicantId], references: [id])
  applicantId                 String
  applicantName               String
  applicantImage              String
  applicationMessage          String?
  applicantSoftwareExperience String?
  createdAt                   DateTime @default(now())
}

enum ShiftStatus {
  Pending
  Open
  Filled
  Completed
  Canceled
}

model ShiftPayment {
  id                           String        @id @default(cuid())
  shift                        Shift         @relation(fields: [shiftId], references: [id])
  shiftId                      String        @unique
  stripePaymentIntentId        String
  selectedPaymentMethodId      String?
  isWaitingPaymentConfirmation Boolean?
  isFailedPaymentIntent        Boolean?
  status                       PaymentStatus
  amount                       Float
  authorizationExpires         DateTime?
}

model TaxInformation {
  id                                 String @id @default(uuid())
  providerId                         String
  name                               String
  businessName                       String
  taxClassificationType              String
  address                            String
  city                               String
  state                              String
  zipcode                            String
  taxpayerIdentificationNumber       String
  typeOfTaxpayerIdentificationNumber String
  w9formDocumentUrl                  String
  w9formDocumentName                 String

  createdAt DateTime @default(now())

  provider Provider @relation(fields: [providerId], references: [id])

  @@unique([providerId, taxpayerIdentificationNumber])
}

enum PaymentStatus {
  HELD
  RELEASED
  COMPLETED
}

model HiredStatus {
  id                    String   @id @default(cuid())
  shift                 Shift    @relation(fields: [shiftId], references: [id])
  shiftId               String   @unique
  applicant             Provider @relation(fields: [applicantId], references: [id])
  applicantId           String
  applicantName         String
  applicantImage        String
  paid                  Boolean  @default(false)
  attendanceConfirmed   Boolean  @default(false)
  paymentAuthorized     Boolean  @default(false)
  stripePaymentIntentId String?
}

model StripeEvent {
  id               String   @id @unique
  api_version      String?
  data             Json
  request          Json?
  type             String
  object           String
  account          String?
  created          DateTime
  livemode         Boolean
  pending_webhooks Int
}

model StripePayment {
  id              String      @id @default(cuid())
  stripePaymentId String      @unique
  amount          Float
  currency        String
  status          String
  description     String?
  paymentType     PaymentType
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  provider        Provider    @relation(fields: [providerId], references: [id])
  providerId      String
}

model LicensePayment {
  id              String   @id @default(cuid())
  amount          Int
  status          String
  providerId      String
  licenseType     String
  stateLicense    String
  stripePaymentId String
  licenseId       String
  createdAt       DateTime @default(now())
  provider        Provider @relation(fields: [providerId], references: [id])
  License         License  @relation(fields: [licenseId], references: [id])
}

enum PaymentType {
  SUBSCRIPTION
  BACKGROUND_CHECK
  OTHER
}

enum StripeSubscriptionStatus {
  incomplete
  incomplete_expired
  trialing
  active
  past_due
  canceled
  unpaid
  paused
}

model Contract {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [userId])
  userId     String   @unique
  name       String
  signed     Boolean  @default(false)
  signedDate DateTime @default(now())
  version    String
}

model Conversation {
  id             String        @id @default(cuid())
  firstMessage   Boolean       @default(true)
  provider       Provider?     @relation(fields: [providerId], references: [id])
  providerId     String?
  facility       Facility?     @relation(fields: [facilityId], references: [id])
  facilityId     String?
  messages       Message[]
  lastMessage    Message?      @relation("LastMessage", fields: [lastMessageId, lasMessageTime], references: [id, timeSent])
  lastMessageId  String?       @unique
  lasMessageTime DateTime?     @unique
  readReceipts   ReadReceipt[] @relation("ConversationReadReceipt")
  connection     Connection?   @relation(fields: [connectionId], references: [id])
  connectionId   String?       @unique
  Shift          Shift[]

  @@unique([lastMessageId, lasMessageTime])
}

model Message {
  id                      String        @unique @default(cuid())
  timeSent                DateTime      @default(now())
  content                 String
  sentByProvider          Boolean       @default(false)
  sentByFacility          Boolean       @default(false)
  readByProvider          Boolean       @default(false)
  readByFacility          Boolean       @default(false)
  conversation            Conversation  @relation(fields: [conversationId], references: [id])
  conversationId          String
  conversationLastMessage Conversation? @relation("LastMessage")
  readReceipts            ReadReceipt[]

  @@unique([id, timeSent])
}

model ReadReceipt {
  id             String       @id @default(cuid())
  facility       Facility     @relation(fields: [facilityId], references: [id])
  facilityId     String
  provider       Provider     @relation(fields: [providerId], references: [id])
  providerId     String
  conversation   Conversation @relation("ConversationReadReceipt", fields: [conversationId], references: [id])
  conversationId String
  message        Message      @relation(fields: [messageId], references: [id])
  messageId      String
  read           Boolean
  createdAt      DateTime     @default(now())
}

model Connection {
  id            String         @id @default(cuid())
  provider      Provider       @relation(fields: [providerId], references: [id])
  providerId    String
  facility      Facility       @relation(fields: [facilityId], references: [id])
  facilityId    String
  createdAt     DateTime       @default(now())
  conversations Conversation[]
}

model Software {
  id         String     @id @default(cuid())
  name       String     @unique
  providers  Provider[] @relation("ProviderToSoftware")
  facilities Facility[] @relation("FacilityToSoftware")
}

model Specialty {
  id         String     @id @default(cuid())
  name       String     @unique
  providers  Provider[] @relation("ProviderToSpecialty")
  facilities Facility[] @relation("FacilityToSpecialty")
  shifts     Shift[]    @relation("ShiftToSpecialty")
}

model FacilityType {
  id         String     @id @default(cuid())
  name       String     @unique
  providers  Provider[] @relation("ProviderTofacilityType")
  facilities Facility[] @relation("FacilityTofacilityType")
  shifts     Shift[]    @relation("ShiftTofacilityType")
}

model Language {
  id         String     @id @default(cuid())
  name       String     @unique
  providers  Provider[] @relation("ProviderToLanguage")
  facilities Facility[] @relation("FacilityToLanguage")
  shifts     Shift[]    @relation("ShiftToLanguage")
}

model StaffingNeed {
  id         String     @id @default(cuid())
  facilities Facility[] @relation("FacilityToStaffingNeed")
  title      String     @unique
}

model ShiftType {
  id        String     @id @default(cuid())
  facilites Facility[] @relation("FacilityToShiftType")
  shiftType String     @unique
}

model CheckrCandidate {
  id          String             @id @default(cuid())
  candidateId String?            @unique
  firstName   String
  lastName    String
  email       String
  provider    Provider           @relation(fields: [providerId], references: [id])
  providerId  String
  invitations CheckrInvitation[]
  reports     CheckrReport[]
}

model CheckrInvitation {
  id          String          @id @default(cuid())
  checkrId    String          @unique
  package     String
  status      String          @default("pending")
  candidate   CheckrCandidate @relation(fields: [candidateId], references: [candidateId])
  candidateId String
}

model CheckrReport {
  id           String          @id @default(cuid())
  checkrId     String          @unique
  status       String
  result       String?
  adjudication String?
  eta          DateTime?
  reportLink   String?
  candidate    CheckrCandidate @relation(fields: [candidateId], references: [candidateId])
  candidateId  String
}

model ComplianceTraining {
  id         String     @id @default(cuid())
  moduleName String     @unique
  moduleLink String
  providers  Provider[]
}
